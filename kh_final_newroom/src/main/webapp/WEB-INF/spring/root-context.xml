<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- properties 이용 
		1. namespaces 에서 context 추가
		2. <context:property-placeholder location="classpath:properties/khs.properties"/>
		3. 상기 2번 외에 어노테이션 이용
	-->
	<context:property-placeholder location="classpath:properties/*.properties"/>
	
	
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
		
		<!-- 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
		 -->
		<property name="driverClassName" value="${jdbc.driverName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- mybatis-config.xml 에 mappers > mapper resource="" 를 안해도 됨.
			 단, 컴파일이 진행된 후에 가능(restart해야 인식함)
		 -->
		<!-- property name="mapperLocations" value="classpath:mappers/*"/-->
	</bean>
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- transaction 
	0. namespaces에서 tx 체크
	1. xml 이용방법 
	2. xml 기본설정 요소만 작성 후 어노테이션 이용방법
	-->
	
	<!-- 1. xml 이용방법-->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<property name="dataSource" ref="dataSource"/>		
	</bean>
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*"/> select으로 시작하는 모든 메소드에 적용
			transaction 은 일반적으로 update, insert, delete 등 커밋 롤백을 하는 메소드에 설정하며,
			select에도 내부에 update등 메서도 있을 수 있으니 
			<tx:method name="select*" read-only="true"/>
			read-only="true"는 커밋, 롤백 트랜잭션처리 안함 
			
			<tx:method name="insert*" rollback-for="Exception"/>
			 원글 입력에 대해서는 rollback할게 사실 없음
			<tx:method name="update*" rollback-for="Exception"/>
			댓글 입력 시 업데이트는 되었지만 입력이 실패한다면 rollback 개념 필요 
			<tx:method name="delete*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>	
	 -->
	 
	<!-- 2. xml 기본설정 요소만 작성 후 어노테이션 이용방법 -->
	<tx:annotation-driven/>
	<!-- @Transactional -->
	
</beans>
